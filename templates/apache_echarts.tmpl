<!DOCTYPE html>
<html lang="en" style="height: 100%">
<head>
  <meta charset="utf-8">
  <title>{{.PageTitle}}</title>
</head>
<body style="height: 100%; margin: 0">
  <div id="spacer" style="height: 2%;"> </div>
  <div id="container" style="height: 93%;"></div>
  <div id="stats" style="height: 2%;"></div>

  <script type="text/javascript" src="https://fastly.jsdelivr.net/npm/echarts@5.5.0/dist/echarts.min.js"></script>

  <script type="text/javascript">
    var startTime = performance.now();

    var dom = document.getElementById('container');
    var myChart = echarts.init(dom, null, {
      renderer: 'canvas',
      useDirtyRect: false
    });
    var app = {};

    var option;

    function d(year, month, day, hour) {
      month = month.toString().padStart(2, '0');
      day = day.toString().padStart(2, '0');
      hour = hour.toString().padStart(2, '0');
      const isoString = `${year}-${month}-${day}T${hour}:00:00.000Z`;

      return isoString;
    }

    function u(year, month, day, hour, ...events_count) {
      const isoString = d(year, month, day, hour)
      return [isoString, ...events_count];
    }

    var data = [];
{{ range .DynamicLines }}    data.push({{ . }});
{{ end }}

option = {
  useUTC: true,
  dataset: {
    source: data,
    dimensions: [
      {name: 'date', type: 'time'},
{{range .Legends}}      {name: '{{.}}', type: 'number'},
{{end}}
    ]
  },
    legend: {
      orient: 'vertical',
      left: 'left',
      top: 'center',
      data: [{{range .Legends}}'{{.}}',{{end}}]
    },

    tooltip: {
    trigger: 'axis',
    position: function (pt) {
      return [pt[0], '10%'];
    },
    axisPointer: {
      type: 'shadow'
    },
    confine: true
  },
  title: {
    left: 'center',
    text: 'Event frequency distribution on host: {{.Hostname}}',
    subtext: '{{if.PageTitleSubtext}}{{.PageTitleSubtext}}{{end}}'
  },
  toolbox: {
    feature: {
      restore: {},
      saveAsImage: {}
    }
  },
  xAxis: {
    type: 'time',
    boundaryGap: ['5%', '5%'],
  },
  yAxis: {
    type: 'value',
    boundaryGap: [0, '10%']
  },
  dataZoom: [
    {
      type: 'inside',
      start: 0,
      end: 100,
      xAxisIndex: 0,
    },
    {
      type: "slider",
      start: 0,
      end: 20,
      xAxisIndex: 0,

    }
  ],
  grid: {
      left: 120,
              right: 60,
              bottom: '3%',
              containLabel: true
    },
  series: [
    {{ $allglobalvars := . }}
    {{range .Legends}}
    {
      name: '{{ . }}',
              type: 'bar',
            stack: 'logs',
            encode: {
                x: 'date',
                y: '{{ . }}'
            },
      itemStyle: {
        color: '{{ index $allglobalvars.ChannelColors . }}'
      }
    },
    {{end}}
  ]
};

    if (option && typeof option === 'object') {
      myChart.setOption(option);
      var endTime = performance.now();
      var duration = endTime - startTime;
    }

    var durationInSeconds = (duration / 1000).toFixed(2);
    document.getElementById('stats').textContent = "Chart rendering took " + durationInSeconds + " seconds. Generated by EvtxHussar \u00A9";
    document.getElementById('stats').style.textAlign = "center";

    window.addEventListener('resize', myChart.resize);
  </script>
</body>
</html>